
# Handle the case where the script is *not* being run via SGE
if [ -z "${SGE_TASK_ID}" ]; then
  SGE_TASK_ID=1
fi
if [ -z "${JOB_ID}" ]; then
  JOB_ID=0
fi

jobname=${TASK[$SGE_TASK_ID]}

RUNDIR=`pwd`
OUTDIR=$RUNDIR/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_${jobname}

mkdir -p $OUTDIR
echo $OUTDIR

# Get the 'allosmod' binary in the path
module load allosmod

# Make a temporary directory on the local scratch disk,
# specific to the user and SGE job.
TMPDIR="@LOCAL_SCRATCH@/@ASPDB@_${jobname}_$JOB_ID/"
mkdir -p $TMPDIR
echo $TMPDIR

# Copy input files to $TMPDIR here...
awk '{print "cp "$1" '${TMPDIR}'"}' list |sh
cp align.ali $TMPDIR/align.ali
cp list $TMPDIR/
cp lig.pdb $TMPDIR/
# If optional files exit, copy without newline problems
if test -e glyc.dat; then awk '{print $0}' glyc.dat | sed 's/\o015//g' > $TMPDIR/glyc.dat; fi
if test -e allosmod.py; then awk '{print $0}' allosmod.py | sed 's/\o015//g' > $TMPDIR/allosmod.py; fi
if test -e break.dat; then awk '{print $0}' break.dat | sed 's/\o015//g' > $TMPDIR/break.dat; fi
if test -e model_run.py; then awk '{print $0}' model_run.py | sed 's/\o015//g' > $TMPDIR/model_run.py; fi

run_actual_job() {
  hostname
  date >>run.log
  date
  
  #########
  #check alignment file and pdb files
  #########
  #if no chains specified, set to A
  CHAIN_PM=`grep pm.pdb align.ali | grep structureX | awk 'BEGIN{FS=":"}{print $4}' | head -n1`
  if test -z $CHAIN_PM; then CHAIN_PM=`grep pm.pdb align.ali | grep sequence | awk 'BEGIN{FS=":"}{print $4}' | head -n1`; fi
  if test -z $CHAIN_PM; then
      CHAIN_PM=A
      LINE2REP=`grep -n pm.pdb align.ali | grep structureX | awk 'BEGIN{FS=":"}{print $1}' | head -n1`
      if test -z $LINE2REP; then LINE2REP=`grep -n pm.pdb align.ali | grep sequence | awk 'BEGIN{FS=":"}{print $1}' | head -n1`; fi
      if test -z $LINE2REP; then echo entry for pm.pdb has error >>${OUTDIR}/error.log; return 1; fi
      awk '(NR<'${LINE2REP}'){print $0}' align.ali >tempali0
      awk 'BEGIN{FS=":"}(NR=='${LINE2REP}'){print $1":"$2":"$3":A"$4":"$5":A"$6":"$7":"$8":"$9":"$10}' align.ali >>tempali0
      awk '(NR>'${LINE2REP}'){print $0}' align.ali >>tempali0
      mv tempali0 align.ali
  fi
  #set from 1 to NRES
  IND_PM=1
  LINE2REP=`grep -n pm.pdb align.ali | grep structureX | awk 'BEGIN{FS=":"}{print $1}' | head -n1`
  if test -z $LINE2REP; then LINE2REP=`grep -n pm.pdb align.ali | grep sequence | awk 'BEGIN{FS=":"}{print $1}' | head -n1`; fi
  if test -z $LINE2REP; then echo entry for pm.pdb has error >>${OUTDIR}/error.log; return 1; fi
  IND_PM2=`cat -v align.ali | sed "s/\^M//g" | awk 'BEGIN{FS="";ctr=0}(NR>'${LINE2REP}'){for(a=1;a<=NF;a++){if($a!="/"&&$a!="-"&&$a!="*"&&$a!=" "){ctr+=1}\
               if($a=="*"){exit}}}END{print ctr}'`
  awk '(NR<'${LINE2REP}'){print $0}' align.ali >tempali0
  awk 'BEGIN{FS=":"}(NR=='${LINE2REP}'){print $1":"$2":"'${IND_PM}'":"$4":"'${IND_PM2}'":"$6":"$7":"$8":"$9":"$10}' align.ali >>tempali0
  awk '(NR>'${LINE2REP}'){print $0}' align.ali >>tempali0
  mv tempali0 align.ali
  #test for hetatms in pm.pdb entry, if not filter out all hetatm entries... right now looking for block and heme entries only
  isHET=`awk 'BEGIN{FS="";isHET=0}{for(a=1;a<=NF;a++){if($a==">"){tit=1}if(tit>2&&($a=="."||$a=="h")){isHET=1}if(a==NF){tit+=1}}}END{print isHET}' align.ali`
  if test ${isHET} -eq 0; then
      for s in `cat list`; do
  	awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"){print $0}' $s > tempiq4; mv tempiq4 $s
      done
      awk 'BEGIN{FS=""}{for(a=1;a<=NF;a++){if($a==">"){tit=1}if(tit<3||$a!="."){printf $a}\
           if(a==NF){tit+=1;printf "\n"}}}(NF==0){printf "\n"}' align.ali > tempiq4; mv tempiq4 align.ali
  fi
  #modify residues that Modeller cannot recognize
  for s in `cat list`; do
      allosmod pdb_fix_res --in-place $s
  done
  
  #set up random numbers for structure generation
  RR=`date --rfc-3339=ns | awk -F. '{print $2}' | awk -F- '{print $1}'`
  RAND_NUM=`echo "scale=0; -1*(155421*${JOB_ID}+${RR})%40000-2" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  RR1=`echo "scale=0; (155421*${JOB_ID}+${RR})%360" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  RR2=`echo "scale=0; (5433*${JOB_ID}+2*${RR})%360" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  RR3=`echo "scale=0; (11*${JOB_ID}+3*${RR})%360" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  
  ##########
  ### if AllosMod landscape, set up landscape here ###
  ##########
  if test @SAMPLING@ == "simulation" -o @SAMPLING@ == "moderate_am"; then
  
  ##########
  #make initial structure: 1) randomized, interpolation of pdbs if NTOT>1 or ligand binding site is modeled 2) single model wtih rotations/translations if NTOT=1
  ##########
  NTOT=`allosmod count_alignments align.ali list pm.pdb`
  isLIGMOD=`awk 'BEGIN{a=1}($3=="XX"&&NR==1){a=0}END{print a}' lig.pdb`
  if test ${NTOT} -gt 1 -o ${isLIGMOD} -eq 1; then
      #generate pm's for input structures
      ctr=0
      for s in `cat list`; do
  	echo $s >listinit
  echo making input structure $s
  	allosmod get_pm_initialstruct --target pm.pdb --keep-alignment \
                                        align.ali listinit ./ 1 slow 2>> ${OUTDIR}/error.log
  	if (test ! -s pred_${s}/pm.pdb.B99990001.pdb); then
  	    echo "MODELLER has failed to create an initial model of the following structure: "${s} >>${OUTDIR}/error.log
  	    echo "Perhaps there is an issue with the alignment file, check MODELLER output above" >>${OUTDIR}/error.log
  	    echo "The alignment headers and sequence should look something like: " >>${OUTDIR}/error.log
  	    allosmod pdb2ali $s >>${OUTDIR}/error.log
  	    echo "Also, double check that the alignments themselves make sense." >>${OUTDIR}/error.log
  	    break
  	fi
  	awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"||$1$2$3$4=="HETA"){print $0}'  pred_${s}/pm.pdb.B99990001.pdb >pm_${s}
  echo completed input structure $s
  	#align onto ligpdb so can be visualed with ligand
	allosmod salign0 @LIGPDB@ pm_${s} temp5773.ali
  	PMFIT=`echo pm_${s} | awk 'BEGIN{FS=""}{if($(NF-3)$(NF-2)$(NF-1)$NF==".pdb"){for(a=1;a<=NF-4;a++){printf $a}}else{printf $0}}END{print "_fit.pdb"}'`
  	if (test -s $PMFIT); then
  	    awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"||$1$2$3$4=="HETA"){print $0}' ${PMFIT} >pm_${s}
  	else
  	    echo pm_${s} not aligned, continue anyways
  	fi
  
  	ctr=$((${ctr} + 1))
      done
  
      #exit here if initial structures not generated
      if (test -s ${OUTDIR}/error.log); then
  	echo "" >>${OUTDIR}/error.log
  	allosmod get_auto_align align.ali pm.pdb list align_suggested.ali
  	echo "See align_suggested.ali for a possible alignment file.  " >>${OUTDIR}/error.log
  	echo "***WARNING*** Small errors in the alignment can cause big errors during a simulation due to energy conservation problems. " >>${OUTDIR}/error.log
  	echo "Make sure there are no misalignments in which adjacent residues are aligned far apart \
  	    (alignment programs often do this at the beginning or end of chains)." >>${OUTDIR}/error.log
  	return 1
      fi
  
      allosmod getavgpdb pm_@ASPDB@ pm_@OTHPDB@ @ASPDB@ @OTHPDB@ 2>> ${OUTDIR}/error.log
      if test -s ${OUTDIR}/error.log; then
        return 1
      fi
      cp list list4contacts
  
  else #NTOT=1
      echo generate avgpdb.pdb using all structures in list, which are translated/rotated
      echo generate avgpdb.pdb using all structures in list, which are translated/rotated >>run.log
  
      #translate and rotate input pdbs
      XVECT=( 0 1 0 0 -1 0 0 )
      YVECT=( 0 0 1 0 0 -1 0 )
      ZVECT=( 0 0 0 1 0 0 -1 )
      ctr=-1; iVECT=0
      for s in `cat list`; do
  	ctr=$((${ctr} + 1))
  	RR=`date --rfc-3339=ns | awk -F. '{print $2}' | awk -F- '{print $1}'`
  	RAND_NUM=`echo "scale=0; -1*(155421*${JOB_ID}+${RR})%40000-2" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  	RR1=`echo "scale=0; ((${ctr}+1)*${JOB_ID}+${RR})%360" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  	RR2=`echo "scale=0; ((${ctr}+13)*${JOB_ID}+2*${RR})%360" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  	RR3=`echo "scale=0; ((${ctr}+23)*${JOB_ID}+3*${RR})%360" |bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
  	#rotate
  echo $RAND_NUM $RR1 $RR2 $RR3
  	allosmod rotatepdb -- $s $RR1 $RR2 $RR3 >random.ini
  	#translate
  	RG[$ctr]=`allosmod getrofg random.ini`
  	COFM=(`allosmod getcofm random.ini`)
  	DIST=`echo "1.3*(${RG[0]}+${RG[${ctr}]})" | bc -l`
  	iD=`echo $ctr | awk '{if($1<7){print $1%7}else{print ($1-7)%6+1}}'`
  	if test ${iD} -eq 1; then iVECT=$((${iVECT} + 1)); fi
  echo $iD $iVECT $DX $DY $DZ
  	DX=`echo "-1*(${COFM[0]})+(${XVECT[${iD}]}*${iVECT}*${DIST})" | bc -l`
  	DY=`echo "-1*(${COFM[1]})+(${YVECT[${iD}]}*${iVECT}*${DIST})" | bc -l`
  	DZ=`echo "-1*(${COFM[2]})+(${ZVECT[${iD}]}*${iVECT}*${DIST})" | bc -l`
  	allosmod translatepdb -- random.ini $DX $DY $DZ > $s
  	rm random.ini
  	
  	#reset lig.pdb to c of m
  	awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"){{for(a=31;a<=38;a++){printf $a}}{printf " "}\
              {for(a=39;a<=46;a++){printf $a}}{printf " "}\
              {for(a=47;a<=54;a++){printf $a}}{printf " \n"}}' @LIGPDB@ |\
              awk 'BEGIN{a=0;b=0;c=0}{a+=$1;b+=$2;c+=$3}END\
              {printf "ATOM      1  XX  ALA A   1    %8.3f%8.3f%8.3f  1.00 99.99           C\n",a/NR,b/NR,c/NR}' >lig.pdb
      done
      #generate input structure
      cp list listinit
      s=`head -n1 list`
      allosmod get_pm_initialstruct --target pm.pdb --keep-alignment \
                                    align.ali listinit ./ 1 slow 2>> ${OUTDIR}/error.log
      if (test ! -s pred_${s}/pm.pdb.B99990001.pdb); then
  	echo "MODELLER has failed to create an initial model of the following structure: avgpdb.pdb" >>${OUTDIR}/error.log
  	echo "Perhaps there is an issue with the alignment file, check for MODELLER errors above" >>${OUTDIR}/error.log
  	return 1
      fi
      awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"||$1$2$3$4=="HETA"){print $0}'  pred_${s}/pm.pdb.B99990001.pdb >avgpdb.pdb
  
      cp avgpdb.pdb pm_@ASPDB@
      cp avgpdb.pdb pm_@OTHPDB@
      echo @ASPDB@ >list4contacts
  fi
  echo input structure completed
  
  ############
  #testfirst: if first job setup initial files, else copy from directory
  ############
  if test `echo "${jobname}==0" |bc -l` -eq 1; then
  #generate allosteric site
  allosmod get_allosteric_site --output_pdb allostericsite.pdb \
                 --atom_list atomlistASRS @LIGPDB@ lig.pdb pm_@LIGPDB@ @RAS@ \
                 2>> ${OUTDIR}/error.log || return 1
  
  ############
  #get restraints
  ############
  TEST_NUC=`awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"){print $18$19$20}' pm_@ASPDB@ | sort -u | awk 'BEGIN{test=""}\
      ($1=="ADE"||$1=="CYT"||$1=="GUA"||$1=="THY"||$1=="DA"||$1=="DC"||$1=="DG"||$1=="DT"){test="--nucleic-acids"}END{print test}'` #use longer sc-sc dist for nucleotides
  if test "@RAS@" != "1000"; then #use ASPDB restraints if AS defined
      echo @ASPDB@ >listin
      allosmod make_mod_inputs ${TEST_NUC} -- pm.pdb listin \
                               -3333 3 3 3 @DEVIATION@ > model_ini.log
      mv pm.pdb.rsr listAS.rsr
  fi
  awk '(NF>0){print $0}' list >listin
  allosmod make_mod_inputs ${TEST_NUC} -- pm.pdb listin \
                           -3333 3 3 3 @DEVIATION@ > model_ini.log
  mv pm.pdb.rsr listOTH.rsr
  if test "@RAS@" == "1000"; then cp listOTH.rsr listAS.rsr; fi #use all restraints if AS not defined
  
  #if delEmax was unspecified in input.dat, calculate here (ignore DNA/RNA because handled differently) using hypothetical E landscape
  delEmax=@DELEMAX@
  if test "@DELEMAX@" == "CALC"; then
    echo "Determining delEmax" >>run.log
    awk 'BEGIN{FS=""}{a=$18$19$20}(a!="ADE"&&a!="  A"&&a!=" DA"&&a!="THY"&&a!="  T"&&a!=" DT"&&a!="URA"&&a!="  U"&&\
         a!=" DU"&&a!="GUA"&&a!="  G"&&a!=" DG"&&a!="CYT"&&a!="  C"&&a!=" DC"&&($1$2$3$4=="ATOM"||$1$2$3$4=="HETA")){print $0}' pm_@ASPDB@ >tempiq7781
    awk 'BEGIN{FS=""}{a=$18$19$20}(a!="ADE"&&a!="  A"&&a!=" DA"&&a!="THY"&&a!="  T"&&a!=" DT"&&a!="URA"&&a!="  U"&&\
         a!=" DU"&&a!="GUA"&&a!="  G"&&a!=" DG"&&a!="CYT"&&a!="  C"&&a!=" DC"&&($1$2$3$4=="ATOM"||$1$2$3$4=="HETA")){print $0}' pm_@OTHPDB@ >tempiq7782
  
    if (test -s tempiq7781); then
      NATOM1=`awk 'END{print NR}' pm_@ASPDB@`
      NATOM2=`awk 'END{print NR}' tempiq7781`
      if test ${NATOM1} -eq ${NATOM2}; then
  	NTOT=`allosmod count_alignments align.ali list pm.pdb`
  	allosmod edit_restraints --sigma_AS=2.0 --sigma_RS=2.0 \
                   --sigma_inter=2.0 --cutoff=11.0 --ntotal=$NTOT --delEmax=0.1 \
                   listOTH.rsr listAS.rsr tempiq7781 list4contacts \
                   atomlistASRS > edited.rsr 2>> ${OUTDIR}/error.log
        if test -s ${OUTDIR}/error.log; then
          return 1
        fi
      else #redo steps without nucleotides
  	echo redo restraints without nucleotides
          allosmod get_allosteric_site --atom_list atomlistASRS2 \
                                    @LIGPDB@ lig.pdb tempiq7781 @RAS@
  	cp align.ali align.ali.bak
  	allosmod pdb2ali tempiq7781 >>align.ali
  	echo tempiq7781 >listin
  	allosmod make_mod_inputs -- tempiq7781 listin \
                                   -3333 3 3 3 @DEVIATION@ > model_ini.log
  	mv tempiq7781.rsr listAS2.rsr
  	allosmod pdb2ali tempiq7782 >>align.ali
  	echo tempiq7782 >listin
  	allosmod make_mod_inputs -- tempiq7782 listin \
                                   -3333 3 3 3 @DEVIATION@ > model_ini.log
  	mv tempiq7782.rsr listOTH2.rsr #will this make sense in all cases?
  
  	NTOT=`allosmod count_alignments align.ali list pm.pdb`
  	mv align.ali.bak align.ali
  
  	allosmod edit_restraints --sigma_AS=2.0 --sigma_RS=2.0 \
                   --sigma_inter=2.0 --cutoff=11.0 --ntotal=$NTOT --delEmax=0.1 \
                   listOTH2.rsr listAS2.rsr tempiq7781 list4contacts \
                   atomlistASRS2 > edited.rsr 2>> ${OUTDIR}/error.log
        if test -s ${OUTDIR}/error.log; then
          return 1
        fi
  
  	rm listOTH2.rsr listAS2.rsr atomlistASRS2 tempiq778[12].ini
      fi
      NHET=`awk 'BEGIN{FS=""}($1$2$3$4=="HETA"){print $18$19$20,$22,$23$24$25$26}' tempiq7781 |\
            awk 'BEGIN{nhet=0;li="";lc="";lt==""}{if($1!=lt||$2!=lc||$3!=li){nhet+=1;lt=$1;lc=$2;li=$3}}END{print nhet}'`
      NRES=`awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"){print $23$24$25$26}' tempiq7781 | awk 'END{print $1}'`
      #if no distance interactions, delEmax defaults to 0.1
      delEmax=`awk '($2==50){a+=1}END{if(a>0){printf "%9.3f",3.6*('${NRES}'+'${NHET}')/a}else{print 0.1}}' edited.rsr | awk '{print $1}'`
      NDISTCONT=`awk '($2==50){a+=1}END{print a}' edited.rsr`
      TF=`echo "367*${delEmax}*${NDISTCONT}/(4*(${NRES}+${NHET}))" | bc -l | awk '{printf "%9.0f",$1}' | awk '{print $1}'`
    else
      delEmax=999
      NDISTCONT=NA
      TF=NA
    fi
  
    if test -z $delEmax; then echo "delEmax not correctly calculated" >>${OUTDIR}/error.log; return 1; fi
    echo "delEmax set to: "$delEmax >>run.log
    echo "Number of distance contacts: "$NDISTCONT >>run.log
    echo "Estimated Tf: "$TF >>run.log
  
    rm edited.rsr tempiq778[12]
  fi
  
  #handle break.dat options
  if test "@BREAK@" == "true"; then
      awk '(NF>0){print $0}' list >listin
      #redo here because nucleotides change max_sc_sc_distance
      allosmod make_mod_inputs -- pm.pdb listin \
                         -3333 3 3 3 @DEVIATION@ > model_ini.log
      if [ "@CHEMFR@" = "cdensity" ]; then
        allosmod contpres --cdensity_cutoff @ZCUTOFF@ pm.pdb.rsr pm_@ASPDB@ @SCLBREAK@
      else
        allosmod contpres pm.pdb.rsr pm_@ASPDB@ @SCLBREAK@
      fi
      echo "Chemical frustration is implemented: contacts with buried acidic/basic residues are scaled by @SCLBREAK@, z-score cutoff is @ZCUTOFF@" >>run.log
      echo "Chemical frustration type is @CHEMFR@" >>run.log
  fi
  if test "@LOCALRIGID@" == "true"; then
      allosmod get_loopadjres #strengthen residues adjacent to loops
  fi
  if (test -e break.dat); then
      break="break.dat"
  else
      break=""
  fi
  
  ########
  #merge restraint files and add additional restraints
  ########
  if (test ! -s ${OUTDIR}/error.log); then
      NTOT=`allosmod count_alignments align.ali list pm.pdb`
      allosmod edit_restraints --sigma_AS=2.0 --sigma_RS=2.0 \
               --sigma_inter=2.0 --cutoff=11.0 --ntotal=$NTOT \
               --delEmax=${delEmax} @COARSE@ @LOCALRIGID@ ${break} \
               listOTH.rsr listAS.rsr pm_@ASPDB@ list4contacts \
               atomlistASRS > edited.rsr 2>> ${OUTDIR}/error.log
      if test -s ${OUTDIR}/error.log; then
        return 1
      fi
      #add restraints between protein and sugar
      if test @GLYC2@ -eq 1; then
        allosmod get_glyc_restraint pm_@ASPDB@ allosmod.py >>edited.rsr 2>> ${OUTDIR}/error.log
        if test -s ${OUTDIR}/error.log; then
          return 1
        fi
      fi
      #add restraints for bonds and distance upper/lower bounds
      allosmod get_add_restraint ${RUNDIR}/input.dat pm_@ASPDB@ HARM >tempaddrestr
      allosmod get_add_restraint ${RUNDIR}/input.dat pm_@ASPDB@ UPBD >>tempaddrestr
      allosmod get_add_restraint ${RUNDIR}/input.dat pm_@ASPDB@ LOBD >>tempaddrestr
      if (test -s tempaddrestr); then
  	cat tempaddrestr >>edited.rsr
  	echo "" >>run.log; echo "additional restraints: " >>run.log; cat tempaddrestr >>run.log; echo "" >>run.log
  	#redo initial structure with additional restraints
  	for dir in `ls -1d pred_*`; do
  	    cd $dir
  	    awk '($2==2||$2==3){print $0}' ../tempaddrestr >> pm.pdb.rsr
  	    awk '($2==1){print $0}' ../tempaddrestr | awk 'BEGIN{FS=""}{for(a=1;a<=45;a++){printf $a;if(a==45){printf "   20.0000    0.0100\n"}}}' >> pm.pdb.rsr
  	    mv pm.pdb.rsr edit.rsr
  	    allosmod get_pm_initialstruct --target pm.pdb --keep-alignment \
                                            --csrfile edit.rsr --no-chdir \
                                            align.ali ../listinit ./ 1 slow
  	    cd ..
  	done
  	if test ${NTOT} -gt 1 -o ${isLIGMOD} -eq 1; then
  	    for s in `cat list`; do
  		awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"||$1$2$3$4=="HETA"){print $0}'  pred_${s}/pm.pdb.B99990001.pdb >pm_${s}
  	    done
            allosmod getavgpdb pm_@ASPDB@ pm_@OTHPDB@ @ASPDB@ @OTHPDB@ 2>> ${OUTDIR}/error.log
            if test -s ${OUTDIR}/error.log; then
              return 1
            fi
  	else
  	    s=`head -n1 list`
  	    awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"||$1$2$3$4=="HETA"){print $0}'  pred_${s}/pm.pdb.B99990001.pdb >avgpdb.pdb
  	    cp avgpdb.pdb pm_@ASPDB@
  	    cp avgpdb.pdb pm_@OTHPDB@
  	fi
      fi
      rm tempaddrestr
  fi
  
  else #notfirst: use previously calculated atomlistASRS and restraints
  delEmax=@DELEMAX@
  echo searching for converted.rsr
  date
  for c in `seq 60`; do
      echo $c
      FIRSTDIR=${RUNDIR}/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_0
      echo $FIRSTDIR
      ls $FIRSTDIR
      TESTF=`ls -1 ${FIRSTDIR}/converted.rsr | awk '(NR==1){print "basename "$1}' |sh`
      echo "test: "$TESTF
      if (test ! -z $TESTF); then
  	cp ${FIRSTDIR}/atomlistASRS .
  	cp ${FIRSTDIR}/converted.rsr .
  	cp ${FIRSTDIR}/allostericsite.pdb .
  	if (test -e ${FIRSTDIR}/allosmod.py); then cp ${FIRSTDIR}/allosmod.py .; fi
  	echo cp done
  	break
      elif test -s ${FIRSTDIR}/error.log; then
        echo "First job failed (see pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_0/error.log) so cannot continue" >> ${OUTDIR}/error.log
        return 1
      else
  	echo sleep
  	sleep 2m
      fi
      echo continue
      if test ${c} -eq 60; then echo restraints not found >> ${OUTDIR}/error.log; return 1; fi
  done
  fi #testfirst
  
  echo edited.rsr file complete
  
  #catch errors
  if (test -s ${OUTDIR}/error.log); then return 1; fi
  
  #initialize starting structure
  allosmod make_mod_inputs -- pm.pdb list $RAND_NUM \
                           $RR1 $RR2 $RR3 @DEVIATION@ > model_ini.log
  allosmod setchain random.ini $CHAIN_PM | awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"||$1$2$3$4=="HETA"){print $0}' >tempini
  mv tempini random.ini
  if (test ! -s random.ini); then echo structure not initialized >> ${OUTDIR}/error.log; return 1; fi
  
  #convert restraints to splines
  if test `echo "${jobname}==0" |bc -l` -eq 1; then
      if test @GLYC1@ -eq 0; then #skip if hydrogens are needed
  	echo convert to splines 
  	allosmod spline random.ini edited.rsr converted.rsr
  	cp converted.rsr atomlistASRS allostericsite.pdb ${RUNDIR}/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_0
  	if (test -e allosmod.py); then cp allosmod.py ${RUNDIR}/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_0; fi
      fi
      echo converted.rsr file complete, copied to ${RUNDIR}/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_0
      ls ${RUNDIR}/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_0
      date
  fi
  if (test ! -s converted.rsr); then echo restraints failed to be converted >> ${OUTDIR}/error.log; return 1; fi
  
  fi ### end setup AllosMod landscape ###
  
  #get AllosModel subclasses from allosmod-lib
  if (test ! -e allosmod.py); then
      ALLOSMOD_PY=`python -c 'import allosmod.modeller, os; print(os.path.splitext(allosmod.modeller.__file__)[0])'`
      cp ${ALLOSMOD_PY}.py allosmod.py
  fi
  MDTEMP=`echo @MDTEMP@ | tr [A-Z] [a-z] | awk '{if($1=="scan"){print ('${jobname}'%5)*50+300.0}else{print $1}}'`
  
  #generate scripts and structures
  if test @GLYC1@ -eq 0; then
      if test "@SAMPLING@" == "simulation"; then
  	echo "randomized numbers: $RAND_NUM $RR1 $RR2 $RR3" >>run.log
  	allosmod make_pm_script -- pm.pdb list $RAND_NUM @DEVIATION@ script $MDTEMP
  	cp @DATADIR@/README_user $RUNDIR/README
  	if test "@SCRAPP@" == "true"; then
  	    python model_run.py > model_run.log
  	    JOBID=`echo $RUNDIR | awk 'BEGIN{FS="/"}{print $(NF-1)}'`
  	    OUTDIR=@GLOBAL_SCRATCH@/${JOBID}/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_${jobname}
  	    mkdir -p $OUTDIR
  	    echo @GLOBAL_SCRATCH@/${JOBID}/pred_dE@DELEMAX@rAS@RAS@ > $RUNDIR/pred_dE@DELEMAX@rAS@RAS@/@ASPDB@_${jobname}/OUTPUT_IS_HERE
  	fi
      elif test "@SAMPLING@" == "moderate_cm" -o "@SAMPLING@" == "moderate_am" -o "@SAMPLING@" == "fast_cm"; then
  	allosmod make_pm_script -- pm.pdb list $RAND_NUM @DEVIATION@ @SAMPLING@ $MDTEMP
  	echo running modeller
  	python model_run.py >& model_run.log
  	echo done with modeller
      else
  	echo "sampling type not properly defined" >>${OUTDIR}/error.log
        return 1
      fi
  else #glycosylation
      ls -lrt
      cp @DATADIR@/[A-Z][A-Z][A-Z].rsr .
      allosmod get_pm_glyc -- pm.pdb list $RAND_NUM @REPEAT_OPTIMIZATION@ @ATTACH_GAPS@ script >> ${OUTDIR}/error.log 2>&1
      if test -s ${OUTDIR}/error.log; then
        return 1
      fi
      #generate protein model with correct chains
      python model_ini0.py > model_ini0.log 2>> ${OUTDIR}/error.log
      if test -s ${OUTDIR}/error.log; then
        return 1
      fi
      CHAIN=`awk 'BEGIN{FS=""}($1$2$3$4=="ATOM"||$1$2$3$4=="HETA"){print $22$23}' pm.pdb.B99990001.pdb | awk '{print $1}' | sort -u | head -n1`
      if test -z $CHAIN; then
  	NC=A #`grep pm.pdb align.ali | grep -v P1 | awk 'BEGIN{FS=":"}{print $4}' | awk 'BEGIN{a="A"}(NR==1){a=$1}{print a}'`
  	allosmod setchain pm.pdb.B99990001.pdb --in-place $NC
      fi
      #generate initial glycosylation model and restraints
      allosmod get_pm_glyc -- pm.pdb list $RAND_NUM @REPEAT_OPTIMIZATION@ @ATTACH_GAPS@ pm.pdb.B99990001.pdb >> ${OUTDIR}/error.log 2>&1
      if test -s ${OUTDIR}/error.log; then
        return 1
      fi
      python model_ini.py > model_ini.log 2>> ${OUTDIR}/error.log
      if test -s ${OUTDIR}/error.log; then
        return 1
      fi
      allosmod get_rest pm.pdb.B99990001.pdb >> pm.pdb.rsr 2>> ${OUTDIR}/error.log
      if test -s ${OUTDIR}/error.log; then
        return 1
      fi
      mv pm.pdb.rsr converted.rsr
      #sample glycosylated structures
      python model_glyc.py > model_glyc.log
      rm [A-Z][A-Z][A-Z].rsr get_rest.in
  fi
}

########## do the actual job 
cd $TMPDIR
run_actual_job

date >>run.log
date

# Copy back output files from $TMPDIR here...
if test -e targlist; then rm targlist; fi
if test -e model_ini.log; then rm model_ini.log; fi
rm -f pm.pdb.rsr *fit.pdb listin listinit list4contacts
rm -f edited.rsr pm.pdb.B0*.pdb list*rsr avgpdb.pdb

mv * $OUTDIR

cd $OUTDIR
sleep 10s

rm -rf $TMPDIR
sleep 10s
